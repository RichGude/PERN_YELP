Running the application:
  In the 'server/package.json' file, the 'start' script in added to tell the application what commands to run
  when 'npm start' (matching the script name) is run in the command line bash.

Middleware Handling:
  Format of a middleware function:

    app.use((req, res, next) => {
        console.log("middleware used");
        next();
    })

  Express processes any requests by moving down through the code; that is, if there are two identical 'get'
  requests in the 'server.js' file, any request to will only trip the first and ignore the second.  Just as
  well, with middleware handling ('app.use'), any request that has not triggered yet will trip each middle-
  ware function it passes.  E.g., a get request at "/" will only print '1' to the console:

    app.use((req, res, next) => {console.log("1"); next();}) 
    app.get("/", (req, res) => {})
    app.use((req, res, next) => {console.log("2"); next();})
    app.get("/rest", (req, res) => {})

  This can be used to target middleware for only certain requests.

Asynchronous Programming:
  A Promise is a type of JavaScript handler that has one of three statuses: pending, resolved, or rejected.
  Promise functions can be fed resolve and reject functions via '.then()' and '.catch()' handlers, respect.

    const promise = new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(data);
        }, 2000);
    });

    function onSuccess(data) {
        console.log("Success");
    };
    function onFailure(data) {
        console.log("poopie");
    };

    promise.then(onSuccess);
    promise.catch(onFailure);

  In a more advanced form (using JQuery), this looks like:

    function getUser(id) {
        return new Promise((resolve, reject) => {
            $.getJSON({
                url: `https://api.github.com/users/${id}`,
                success: resolve,
                error: reject,
            });
        });
    }

  Promises, just like callbacks, have issues with error handling and readability.  An improvement onto
  promises is the async/await format, where functions are defined via the 'async' call and individual
  elements which may have 'pending' calls can be designated as 'await'; in this format, error handling
  is performed via the try/catch handler:

    async function handleSubmit () {
        try {
            const user = await getUser("user1");
            const post = await getPost(user.post);

            handlesSuccess({ user, post });
        } catch (e) {
            handleFailure(e);
        }
    }